<#@Template Language="C#" HostSpecific="True" debug="True" #>
<#@Output Extension="cs" #>
<#@Assembly name="System.Core" #>
<#@import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Data"  #>
<#@ import namespace="System.Web"  #>
<#@ import namespace="System.Data.SqlClient"  #>
<#@ import namespace="System.Collections.Generic"  #>
<#@ import namespace="System.Configuration" #>
<#@include file="..\Functions\Utils.t4" #>
<#
	string stringConnection = Model.DefaultConnection;
    string sqlCommand = string.Format("SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME ='{0}' " , Model.Name);   

	List<Dictionary<string,string> > properties = new List<Dictionary<string,string> >();
	
	using( SqlConnection connection = new SqlConnection(stringConnection) ) 
	{
        // Connect to the database then retrieve the schema information.
        connection.Open();                    
        SqlCommand command = new SqlCommand(sqlCommand , connection);                    
        using( var reader = command.ExecuteReader() ) 
		{
			while(reader.Read())
			{
				string columnName = reader["COLUMN_NAME"].ToString();
				string dataType = reader["DATA_TYPE"].ToString();
				string isNullable = reader["IS_NULLABLE"].ToString();
				string maxLength = reader["CHARACTER_MAXIMUM_LENGTH"].ToString();

				Dictionary<string,string> props = new Dictionary<string,string>();
				props["columnName"]= columnName;
				props["dataType"]= dataType;
				props["isNullable"]= isNullable;
				props["maxLength"]= maxLength;

				properties.Add(props);
            }
		}

     }
#>
using  <#= Model.Namespace #>.interfaces;
using  <#= Model.Namespace #>.repositories.interfaces;

namespace  <#= Model.Namespace #>.concrete
{
    public class  <#= Model.Name #>QueryParams : I<#= Model.Name #>QueryParams , IDataQuery
    {
        #region I<#= Model.Name #>QueryParams Members

<# 
foreach (var item in properties)
{#>
        private string _<#=item["columnName"].ToString()#>;

        public string <#= Captalized(item["columnName"].ToString()) #>
        {
            get { return _<#=item["columnName"].ToString()#>; }
            set { _<#=item["columnName"].ToString()#> = value; }
        }
<#}
#>
        #endregion I<#= Model.Name #>QueryParams Members

        #region IDataQuery Members

        private string _column;
        private string _from;
        private string _where;
        private string _orderBy;

        public string From
        {
            get
            {
                return _from;
            }
            set
            {
                _from = value;
            }
        }

        public string Where
        {
            get
            {
                return _where;
            }
            set
            {
                _where = value;
            }
        }

        public string OrderBy
        {
            get
            {
                return _orderBy;
            }
            set
            {
                _orderBy = value;
            }
        }

        public string Column
        {
            get
            {
                return _column;
            }
            set
            {
                _column = value;
            }
        }

        #endregion IDataQuery Members
    }
}


<#+ 

	public string LowerModelName()
    {
		return Uncaptalized(Model.Name);
    }
	public string UpperModelName()
    {
		return Captalized(Model.Name);
    }
 #>